#!/usr/bin/env ruby

require 'erb'
require 'json'
require 'fileutils'

ARGV << "--help" if ARGV.empty?

ALIASES = {
  "n"  => "new",
  "g"  => "generate",
  "t"  => "test",
  "i"  => "init",
  "ik" => "import_keys",
  "b"  => "build",
  "m"  => "migrate",
  "s"  => "server",
  "c"  => "console",
  "gt" => "gtest"
}

command = ARGV.shift
command = ALIASES[command] || command

HELP_MESSAGE = <<-EOF
Usage: teth COMMAND [ARGS]
The most common teth commands are:
  new         Create a new Smart Contract application. "teth new my_app" creates a
              new application called my_app in "./my_app" (short-cut alias: "n")
  generate    Generate new solidity smart contract and test files. "teth generate token"
              creates Token contract and corresponding test files. (short-cut alias: "g")
  test        Run your ruby tests in ruby evm. (short-cut alias: "t")
  init        Bootstraps and initialises a new genesis block. "teth init" creates data directory
              for private chain.(short-cut alias: "i")
  import_keys Import keys to private chain (short-cut alias: "ik")
  build       Build contract (short-cut alias: "b")
  migrate     Deploy contract on private chain (short-cut alias: "m")
  server      Start geth server (short-cut alias: "s")
  console     Start geth attach (short-cut alias: "c")
  geth_test   Run your javascript tests on geth (short-cut alias: "gt")

All commands can be run with -h (or --help) for more information.
EOF

KEYS_TEMPLATE = {
  "3ae88fe370c39384fc16da2c9e768cf5d2495b48" => "095e53c9c20e23fd01eaad953c01da9e9d3ed9bebcfed8e5b2c2fce94037d963",
  "81063419f13cab5ac090cd8329d8fff9feead4a0" => "5bc505a123a695176a9688ffe22798cfd40424c5b91c818e985574ea8ebda167",
  "9da26fc2e1d6ad9fdd46138906b0104ae68a65d8" => "b6a03207128827eaae0d31d97a7a6243de31f2baf99eabd764e33389ecf436fc"
}

def gem_dir
  spec = Gem::Specification.find_by_name("teth")
  spec.gem_dir
end

def new
  name = ARGV.shift
  if name
    puts "Creating project #{name}..."
    dirs_commands = %w{ private_keys builds temp contracts tests gtests}.map{ |d| "mkdir #{d}" }.join(" && ")
    system("mkdir #{name} && cd #{name} && #{dirs_commands}")
    system("cd #{name} && cd temp && mkdir db && mkdir migrations")
    gemfile = File.read("#{gem_dir}/lib/teth/erbs/Gemfile")

    File.open("#{name}/Gemfile", "w+") {|f| f.write(gemfile) }
    system("cd #{name} && bundle install")

    KEYS_TEMPLATE.each do |k, v|
      File.open("#{name}/private_keys/#{k}.key", "w+") { |f| f.write(v) }
    end

    FileUtils.cp("#{gem_dir}/lib/teth/templates/private_keys/import.sh", "#{name}/private_keys/import.sh")
    FileUtils.chmod 0700, "#{name}/private_keys/import.sh"

    %w{genesis.json rakefile gitignore}.each do |f|
      FileUtils.cp("#{gem_dir}/lib/teth/templates/#{f}", "#{name}/#{f}")
    end
    FileUtils.mv("#{name}/gitignore", "#{name}/.gitignore")

    FileUtils.cp_r("#{gem_dir}/lib/teth/templates/bin/", "#{name}")
    FileUtils.chmod_R 0700, "#{name}/bin/"
    puts "Done."
  else
    puts "Need project name"
  end
end

def generate
  name = ARGV.shift
  if name
    puts "Creating #{name.capitalize} contract file..."
    contract_template = ERB.new File.read("#{gem_dir}/lib/teth/erbs/contract.sol")
    contract = contract_template.result(binding)
    File.open("contracts/#{name.capitalize}.sol", "w+") { |f| f.write(contract) }

    puts "Creating #{name} test files..."
    test_template = ERB.new File.read("#{gem_dir}/lib/teth/erbs/contract_test.rb")
    test = test_template.result(binding)
    File.open("tests/#{name}_test.rb", "w+") {|f| f.write(test) }
    File.open("gtests/#{contract}_test.js", "w") do |f|
      f.write("loadScript('temp/migrations/#{contract}.js');")
    end
    puts "Done."
  else
    puts "Need contract name"
  end
end

def test
  name = ARGV.shift
  if name
    puts "Test #{name.capitalize} contract..."
    system("bundle exec ruby -Ilib:test tests/#{name}_test.rb")
  else
    puts "Test all contracts..."
    system("bundle exec rake")
  end
  puts "Done."
end

def init
  puts "Initialising a new genesis block..."
  system("./bin/init.sh")
end

def import_keys
  puts "Importing keys, this will take a while, please be patient..."
  system("./bin/import_keys.sh")
end

def build
  name = ARGV.shift
  system("./bin/build.sh #{name}")
end

def server
  system("./bin/private_blockchain.sh")
end

def migrate
  name = ARGV.shift
  if name
    puts "Migrating contract #{name}"
  else
    puts "Migrating all contracts"
  end
  output = `./bin/migrate.sh #{name}`
  puts output
  contract = ""
  output.split("\n").each do |o|
    if o.match("Contract Instance")
      contract = o.split("Contract Instance : ")[1]
    end
    if o.match("Contract mined!")
      address = o.split("Address: ")[1]
      data = File.read("temp/db/#{contract}.json")
      data = JSON.parse data
      data["address"] = address
      File.open("temp/db/#{contract}.json", "w") do |f|
        f.write(JSON.pretty_generate data)
      end
      File.open("temp/migrations/#{contract}.js", "w") do |f|
        abi = data[contract]["abi"]
        template = ERB.new File.read("#{gem_dir}/lib/teth/erbs/migration")
        migration = template.result(binding)
        f.write(migration.gsub("=>", ":"))
      end
    end
  end
end

def console
  system("./bin/attach.sh")
end

def gtest
  name = ARGV.shift
  system("./bin/test.sh #{name}")
end

def help
  write_help_message
end

def write_help_message
  puts HELP_MESSAGE
end

def parse_command(command)
  case command
  when "--help", "-h"
    "help"
  else
    command
  end
end

def run_command!(command)
  command = parse_command(command)

  if ALIASES.values.include?(command)
    send(command)
  else
    help
  end
end

run_command!(command)
